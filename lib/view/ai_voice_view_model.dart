import 'package:flutter/material.dart';
import 'package:smart_home/provider/base_model.dart';

class AIVoiceViewModel extends BaseModel {
  bool _isListening = false;
  bool _isProcessing = false;
  String _recognizedText = '';
  String _aiResponse = '';
  List<String> _commandHistory = [];

  // Mapping c√°c l·ªánh ti·∫øng Vi·ªát v·ªõi thi·∫øt b·ªã
  final Map<String, Map<String, dynamic>> _deviceCommands = {
    // ƒê√®n
    'ƒë√®n c·ªïng': {'type': 'light', 'location': 'gate', 'device': 'ƒê√®n c·ªïng'},
    'ƒë√®n ph√≤ng kh√°ch': {'type': 'light', 'location': 'living_room', 'device': 'ƒê√®n ph√≤ng kh√°ch'},
    'ƒë√®n ph√≤ng ng·ªß': {'type': 'light', 'location': 'bedroom', 'device': 'ƒê√®n ph√≤ng ng·ªß'},
    'ƒë√®n b·∫øp': {'type': 'light', 'location': 'kitchen', 'device': 'ƒê√®n b·∫øp'},
    'ƒë√®n ph√≤ng t·∫Øm': {'type': 'light', 'location': 'bathroom', 'device': 'ƒê√®n ph√≤ng t·∫Øm'},
    'ƒë√®n s√¢n': {'type': 'light', 'location': 'yard', 'device': 'ƒê√®n s√¢n'},
    't·∫•t c·∫£ ƒë√®n': {'type': 'light', 'location': 'all', 'device': 'T·∫•t c·∫£ ƒë√®n'},
    
    // Qu·∫°t
    'qu·∫°t ph√≤ng kh√°ch': {'type': 'fan', 'location': 'living_room', 'device': 'Qu·∫°t ph√≤ng kh√°ch'},
    'qu·∫°t ph√≤ng ng·ªß': {'type': 'fan', 'location': 'bedroom', 'device': 'Qu·∫°t ph√≤ng ng·ªß'},
    'qu·∫°t tr·∫ßn': {'type': 'fan', 'location': 'ceiling', 'device': 'Qu·∫°t tr·∫ßn'},
    
    // ƒêi·ªÅu h√≤a
    'ƒëi·ªÅu h√≤a': {'type': 'ac', 'location': 'main', 'device': 'ƒêi·ªÅu h√≤a'},
    'm√°y l·∫°nh': {'type': 'ac', 'location': 'main', 'device': 'M√°y l·∫°nh'},
    'ƒëi·ªÅu h√≤a ph√≤ng kh√°ch': {'type': 'ac', 'location': 'living_room', 'device': 'ƒêi·ªÅu h√≤a ph√≤ng kh√°ch'},
    'ƒëi·ªÅu h√≤a ph√≤ng ng·ªß': {'type': 'ac', 'location': 'bedroom', 'device': 'ƒêi·ªÅu h√≤a ph√≤ng ng·ªß'},
    
    // TV & Gi·∫£i tr√≠
    'tivi': {'type': 'tv', 'location': 'main', 'device': 'TV'},
    'tv': {'type': 'tv', 'location': 'main', 'device': 'TV'},
    'loa': {'type': 'speaker', 'location': 'main', 'device': 'Loa'},
    
    // Kh√°c
    'camera': {'type': 'camera', 'location': 'security', 'device': 'Camera an ninh'},
    'c·ª≠a': {'type': 'door', 'location': 'main', 'device': 'C·ª≠a ch√≠nh'},
    'c·ªïng': {'type': 'gate', 'location': 'entrance', 'device': 'C·ªïng'},
  };

  // C√°c t·ª´ kh√≥a h√†nh ƒë·ªông
  final List<String> _onKeywords = ['m·ªü', 'b·∫≠t', 'kh·ªüi ƒë·ªông', 's√°ng'];
  final List<String> _offKeywords = ['t·∫Øt', 'ƒë√≥ng', 'ng·∫Øt', 't·ªëi'];
  final List<String> _adjustKeywords = ['ch·ªânh', 'ƒëi·ªÅu ch·ªânh', 'ƒë·∫∑t', 'tƒÉng', 'gi·∫£m'];

  bool get isListening => _isListening;
  bool get isProcessing => _isProcessing;
  String get recognizedText => _recognizedText;
  String get aiResponse => _aiResponse;
  List<String> get commandHistory => _commandHistory;

  void initialize() {
    // Initialize speech recognition and AI services
    print('AI Voice Assistant initialized');
  }

  void toggleListening() {
    if (_isListening) {
      stopListening();
    } else {
      startListening();
    }
  }

  void startListening() {
    _isListening = true;
    _recognizedText = '';
    _aiResponse = '';
    notifyListeners();
    
    // Simulate voice recognition v·ªõi c√°c m·∫´u ti·∫øng Vi·ªát
    final sampleCommands = [
      'M·ªü ƒë√®n ph√≤ng kh√°ch',
      'T·∫Øt ƒë√®n b·∫øp',
      'B·∫≠t qu·∫°t ph√≤ng ng·ªß',
      'ƒê·∫∑t ƒëi·ªÅu h√≤a 25 ƒë·ªô',
      'T·∫Øt t·∫•t c·∫£ ƒë√®n',
      'M·ªü ƒë√®n c·ªïng',
      'B·∫≠t tivi',
      'Ch·∫ø ƒë·ªô ƒëi ng·ªß',
    ];
    
    Future.delayed(const Duration(seconds: 3), () {
      _isListening = false;
      _isProcessing = true;
      notifyListeners();
      
      // Random select a command for demo
      final randomCommand = sampleCommands[DateTime.now().millisecond % sampleCommands.length];
      
      Future.delayed(const Duration(seconds: 2), () {
        _isProcessing = false;
        _recognizedText = randomCommand;
        _aiResponse = _processVietnameseCommand(randomCommand);
        _commandHistory.insert(0, randomCommand);
        if (_commandHistory.length > 10) {
          _commandHistory.removeAt(10);
        }
        notifyListeners();
      });
    });
  }

  void stopListening() {
    _isListening = false;
    notifyListeners();
  }

  void executeQuickCommand(String command) {
    _recognizedText = command;
    _isProcessing = true;
    notifyListeners();
    
    Future.delayed(const Duration(seconds: 1), () {
      _isProcessing = false;
      _aiResponse = _processVietnameseCommand(command);
      _commandHistory.insert(0, command);
      if (_commandHistory.length > 10) {
        _commandHistory.removeAt(10);
      }
      notifyListeners();
    });
  }

  String _processVietnameseCommand(String command) {
    final lowerCommand = command.toLowerCase();
    
    // Ph√¢n t√≠ch l·ªánh
    String action = '';
    String device = '';
    String? temperature;
    
    // X√°c ƒë·ªãnh h√†nh ƒë·ªông
    for (String keyword in _onKeywords) {
      if (lowerCommand.contains(keyword)) {
        action = 'on';
        break;
      }
    }
    
    if (action.isEmpty) {
      for (String keyword in _offKeywords) {
        if (lowerCommand.contains(keyword)) {
          action = 'off';
          break;
        }
      }
    }
    
    if (action.isEmpty) {
      for (String keyword in _adjustKeywords) {
        if (lowerCommand.contains(keyword)) {
          action = 'adjust';
          break;
        }
      }
    }
    
    // X√°c ƒë·ªãnh thi·∫øt b·ªã
    for (String deviceKey in _deviceCommands.keys) {
      if (lowerCommand.contains(deviceKey)) {
        device = deviceKey;
        break;
      }
    }
    
    // X√°c ƒë·ªãnh nhi·ªát ƒë·ªô n·∫øu c√≥
    final tempRegex = RegExp(r'(\d+)\s*ƒë·ªô');
    final tempMatch = tempRegex.firstMatch(lowerCommand);
    if (tempMatch != null) {
      temperature = tempMatch.group(1);
      action = 'adjust';
    }
    
    // X·ª≠ l√Ω l·ªánh ƒë·∫∑c bi·ªát
    if (lowerCommand.contains('ch·∫ø ƒë·ªô ƒëi ng·ªß') || lowerCommand.contains('good night')) {
      return _handleNightMode();
    }
    
    if (lowerCommand.contains('ch·∫ø ƒë·ªô ra v·ªÅ') || lowerCommand.contains('v·ªÅ nh√†')) {
      return _handleHomeMode();
    }
    
    if (lowerCommand.contains('ch·∫ø ƒë·ªô ti·∫øt ki·ªám') || lowerCommand.contains('ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng')) {
      return _handleEcoMode();
    }
    
    // X·ª≠ l√Ω l·ªánh th√¥ng th∆∞·ªùng
    if (device.isNotEmpty && _deviceCommands.containsKey(device)) {
      final deviceInfo = _deviceCommands[device]!;
      final deviceName = deviceInfo['device'];
      
      switch (action) {
        case 'on':
          return 'ƒê√£ b·∫≠t $deviceName th√†nh c√¥ng! ‚úÖ';
        case 'off':
          return 'ƒê√£ t·∫Øt $deviceName th√†nh c√¥ng! ‚úÖ';
        case 'adjust':
          if (temperature != null) {
            return 'ƒê√£ ƒë·∫∑t $deviceName ·ªü nhi·ªát ƒë·ªô ${temperature}¬∞C! üå°Ô∏è';
          } else {
            return 'ƒê√£ ƒëi·ªÅu ch·ªânh $deviceName theo y√™u c·∫ßu! ‚öôÔ∏è';
          }
        default:
          return 'ƒê√£ th·ª±c hi·ªán l·ªánh cho $deviceName! ‚úÖ';
      }
    }
    
    // L·ªánh kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c
    return 'Xin l·ªói, t√¥i kh√¥ng hi·ªÉu l·ªánh n√†y. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√°c l·ªánh nh∆∞ "M·ªü ƒë√®n ph√≤ng kh√°ch" ho·∫∑c "T·∫Øt qu·∫°t ph√≤ng ng·ªß". ü§î';
  }

  String _handleNightMode() {
    return '''ƒê√£ k√≠ch ho·∫°t ch·∫ø ƒë·ªô ƒëi ng·ªß! üåô
‚Ä¢ T·∫Øt t·∫•t c·∫£ ƒë√®n tr·ª´ ƒë√®n ng·ªß
‚Ä¢ Gi·∫£m nhi·ªát ƒë·ªô ƒëi·ªÅu h√≤a xu·ªëng 24¬∞C  
‚Ä¢ T·∫Øt TV v√† loa
‚Ä¢ K√≠ch ho·∫°t camera an ninh
Ch√∫c b·∫°n ng·ªß ngon! üò¥''';
  }

  String _handleHomeMode() {
    return '''Ch√†o m·ª´ng b·∫°n v·ªÅ nh√†! üè°
‚Ä¢ B·∫≠t ƒë√®n ph√≤ng kh√°ch v√† h√†nh lang
‚Ä¢ ƒê·∫∑t ƒëi·ªÅu h√≤a ·ªü 26¬∞C
‚Ä¢ B·∫≠t qu·∫°t ph√≤ng kh√°ch
‚Ä¢ M·ªü c·ªïng t·ª± ƒë·ªông
Ch√∫c b·∫°n m·ªôt bu·ªïi t·ªëi vui v·∫ª! üòä''';
  }

  String _handleEcoMode() {
    return '''ƒê√£ k√≠ch ho·∫°t ch·∫ø ƒë·ªô ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng! üçÉ
‚Ä¢ Gi·∫£m ƒë·ªô s√°ng ƒë√®n xu·ªëng 70%
‚Ä¢ ƒê·∫∑t ƒëi·ªÅu h√≤a ·ªü 27¬∞C
‚Ä¢ T·∫Øt c√°c thi·∫øt b·ªã kh√¥ng c·∫ßn thi·∫øt
‚Ä¢ ∆Ø·ªõc t√≠nh ti·∫øt ki·ªám 30% ƒëi·ªán nƒÉng
C·∫£m ∆°n b·∫°n ƒë√£ b·∫£o v·ªá m√¥i tr∆∞·ªùng! üå±''';
  }

  void showSettings(BuildContext context) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.7,
        decoration: const BoxDecoration(
          color: Color(0xFF2E3440),
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text(
                    'C√†i ƒë·∫∑t gi·ªçng n√≥i',
                    style: TextStyle(
                      fontSize: 20, 
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                  IconButton(
                    onPressed: () => Navigator.pop(context),
                    icon: const Icon(Icons.close, color: Colors.white),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              
              // L·ªãch s·ª≠ l·ªánh
              const Text(
                'L·ªãch s·ª≠ l·ªánh g·∫ßn ƒë√¢y:',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Colors.white70,
                ),
              ),
              const SizedBox(height: 10),
              Expanded(
                child: _commandHistory.isEmpty
                    ? const Center(
                        child: Text(
                          'Ch∆∞a c√≥ l·ªánh n√†o ƒë∆∞·ª£c th·ª±c hi·ªán',
                          style: TextStyle(color: Colors.white54),
                        ),
                      )
                    : ListView.builder(
                        itemCount: _commandHistory.length,
                        itemBuilder: (context, index) {
                          return Container(
                            margin: const EdgeInsets.only(bottom: 8),
                            padding: const EdgeInsets.all(12),
                            decoration: BoxDecoration(
                              color: Colors.white.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Row(
                              children: [
                                const Icon(Icons.history, color: Colors.white54, size: 16),
                                const SizedBox(width: 8),
                                Expanded(
                                  child: Text(
                                    _commandHistory[index],
                                    style: const TextStyle(color: Colors.white70),
                                  ),
                                ),
                                IconButton(
                                  onPressed: () {
                                    Navigator.pop(context);
                                    executeQuickCommand(_commandHistory[index]);
                                  },
                                  icon: const Icon(Icons.replay, color: Colors.blue, size: 16),
                                ),
                              ],
                            ),
                          );
                        },
                      ),
              ),
              
              const SizedBox(height: 20),
              
              // C√†i ƒë·∫∑t
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.05),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Column(
                  children: [
                    ListTile(
                      leading: const Icon(Icons.mic, color: Colors.white70),
                      title: const Text('ƒê·ªô nh·∫°y micro', style: TextStyle(color: Colors.white)),
                      trailing: const Text('Cao', style: TextStyle(color: Colors.blue)),
                      onTap: () {},
                    ),
                    const Divider(color: Colors.white24),
                    ListTile(
                      leading: const Icon(Icons.language, color: Colors.white70),
                      title: const Text('Ng√¥n ng·ªØ', style: TextStyle(color: Colors.white)),
                      trailing: const Text('Ti·∫øng Vi·ªát', style: TextStyle(color: Colors.blue)),
                      onTap: () {},
                    ),
                    const Divider(color: Colors.white24),
                    ListTile(
                      leading: const Icon(Icons.volume_up, color: Colors.white70),
                      title: const Text('√Çm l∆∞·ª£ng ph·∫£n h·ªìi', style: TextStyle(color: Colors.white)),
                      trailing: const Text('Trung b√¨nh', style: TextStyle(color: Colors.blue)),
                      onTap: () {},
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Helper method ƒë·ªÉ x√≥a l·ªãch s·ª≠
  void clearHistory() {
    _commandHistory.clear();
    notifyListeners();
  }
}
