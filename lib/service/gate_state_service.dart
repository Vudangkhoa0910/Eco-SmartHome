import 'package:cloud_firestore/cloud_firestore.dart';

/// Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa c·ªïng
enum GateStatus {
  opening('opening', 'ƒêang m·ªü', 'üîì‚¨ÜÔ∏è'),
  closing('closing', 'ƒêang ƒë√≥ng', 'üîí‚¨áÔ∏è'),
  open('open', 'ƒê√£ m·ªü', 'üîì'),
  closed('closed', 'ƒê√£ ƒë√≥ng', 'üîí'),
  stopped('stopped', 'ƒê√£ d·ª´ng', '‚èπÔ∏è'),
  error('error', 'L·ªói', '‚ùå');

  const GateStatus(this.value, this.description, this.icon);
  final String value;
  final String description;
  final String icon;

  static GateStatus fromString(String value) {
    for (final status in GateStatus.values) {
      if (status.value == value) return status;
    }
    return GateStatus.closed; // Default
  }
}

/// Model cho tr·∫°ng th√°i c·ªïng
class GateState {
  final int level;
  final bool isMoving;
  final GateStatus status;
  final DateTime timestamp;

  const GateState({
    required this.level,
    required this.isMoving,
    required this.status,
    required this.timestamp,
  });

  Map<String, dynamic> toMap() {
    return {
      'level': level,
      'isMoving': isMoving,
      'status': status.value,
      'status_description': status.description,
      'status_icon': status.icon,
      'timestamp': timestamp.millisecondsSinceEpoch,
      'created_at': timestamp,
    };
  }

  factory GateState.fromMap(Map<String, dynamic> map) {
    return GateState(
      level: map['level'] ?? 0,
      isMoving: map['isMoving'] ?? false,
      status: GateStatus.fromString(map['status'] ?? 'closed'),
      timestamp: map['timestamp'] != null 
          ? DateTime.fromMillisecondsSinceEpoch(map['timestamp'])
          : DateTime.now(),
    );
  }

  String get description {
    // ∆Øu ti√™n hi·ªÉn th·ªã status description n·∫øu c√≥
    if (isMoving) {
      return status.description;
    }
    
    // Hi·ªÉn th·ªã m√¥ t·∫£ theo level khi kh√¥ng di chuy·ªÉn
    switch (level) {
      case 0: return 'ƒê√≥ng ho√†n to√†n - ${status.description}';
      case 25: return 'M·ªü 1/4 - Ng∆∞·ªùi ƒëi b·ªô';
      case 50: return 'M·ªü 1/2 - Xe m√°y';
      case 75: return 'M·ªü 3/4 - Xe h∆°i nh·ªè';
      case 100: return 'M·ªü ho√†n to√†n - Xe t·∫£i';
      default: return 'M·ªü $level% - ${status.description}';
    }
  }

  String get icon {
    // ∆Øu ti√™n icon c·ªßa status khi ƒëang di chuy·ªÉn
    if (isMoving) return status.icon;
    
    // Icon theo level khi kh√¥ng di chuy·ªÉn
    if (level <= 0) return 'üîí';
    if (level <= 25) return 'üö∂';
    if (level <= 50) return 'üèçÔ∏è';
    if (level <= 75) return 'üöó';
    return 'üöõ';
  }

  /// Ph∆∞∆°ng th·ª©c ti·ªán √≠ch ƒë·ªÉ t·∫°o GateState v·ªõi status t·ª± ƒë·ªông
  factory GateState.withAutoStatus({
    required int level,
    required bool isMoving,
    DateTime? timestamp,
    GateStatus? forcedStatus,
  }) {
    GateStatus status;
    
    if (forcedStatus != null) {
      status = forcedStatus;
    } else if (isMoving) {
      // X√°c ƒë·ªãnh status d·ª±a tr√™n level khi ƒëang di chuy·ªÉn
      status = level > 50 ? GateStatus.opening : GateStatus.closing;
    } else {
      // X√°c ƒë·ªãnh status khi kh√¥ng di chuy·ªÉn
      status = level > 0 ? GateStatus.open : GateStatus.closed;
    }

    return GateState(
      level: level,
      isMoving: isMoving,
      status: status,
      timestamp: timestamp ?? DateTime.now(),
    );
  }
}

/// C√°c m·ª©c ƒë·ªô m·ªü c·ªïng (deprecated - d√πng cho t∆∞∆°ng th√≠ch)
enum GateLevel {
  closed(0, 'ƒê√≥ng', 'üîí'),
  partial33(33, 'M·ªü 1/3', 'üîì'),
  partial66(66, 'M·ªü 2/3', 'üîì'),
  open(100, 'M·ªü ho√†n to√†n', 'üîì‚úÖ');

  const GateLevel(this.percentage, this.description, this.icon);
  final int percentage;
  final String description;
  final String icon;
}

/// Service qu·∫£n l√Ω tr·∫°ng th√°i c·ªïng
class GateStateService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static const String _gateStateCollection = 'gate_states';
  
  static final GateStateService _instance = GateStateService._internal();
  factory GateStateService() => _instance;
  GateStateService._internal();

  /// L∆∞u tr·∫°ng th√°i c·ªïng (phi√™n b·∫£n m·ªõi - ƒë∆°n gi·∫£n h√≥a)
  Future<bool> saveGateState(GateState gateState) async {
    try {
      final data = gateState.toMap();
      data.addAll({
        'description': gateState.description,
        'icon': gateState.icon,
        'device_id': 'main_gate',
        'location': 'entrance',
        'zone': 'entrance', 
        'type': 'gate',
        'updated_at': FieldValue.serverTimestamp(),
      });

      // Use document ID 'main_gate' to avoid index issues
      await _firestore
          .collection(_gateStateCollection)
          .doc('main_gate')
          .set(data, SetOptions(merge: true));
      
      print('‚úÖ Gate state saved successfully: ${gateState.status.description} (${gateState.level}%)');
      return true;
    } catch (e) {
      print('‚ùå Error saving gate state: $e');
      return false;
    }
  }

  /// L∆∞u tr·∫°ng th√°i c·ªïng (deprecated - ƒë·ªÉ t∆∞∆°ng th√≠ch)
  Future<bool> saveGateStateLegacy({
    required String deviceId,
    required GateLevel level,
    String? location,
  }) async {
    final gateState = GateState.withAutoStatus(
      level: level.percentage,
      isMoving: false,
    );
    return saveGateState(gateState);
  }
  /// L·∫•y tr·∫°ng th√°i c·ªïng hi·ªán t·∫°i (phi√™n b·∫£n ƒë∆°n gi·∫£n)
  Future<GateState> getCurrentGateState() async {
    try {
      // Simple document read - no index required
      final doc = await _firestore
          .collection(_gateStateCollection)
          .doc('main_gate')
          .get();
      
      if (doc.exists) {
        final data = doc.data()!;
        // Try new format first
        if (data.containsKey('level') && data.containsKey('status')) {
          return GateState.fromMap(data);
        }
        // Fallback to legacy format
        final percentage = data['percentage'] ?? 0;
        return GateState.withAutoStatus(
          level: percentage,
          isMoving: false,
          timestamp: (data['created_at'] as Timestamp?)?.toDate() ?? DateTime.now(),
        );
      }
      // Return default state if no data found
      return GateState.withAutoStatus(
        level: 0,
        isMoving: false,
        timestamp: DateTime.now(),
      );
    } catch (e) {
      print('‚ùå Error getting current gate state: $e');
      // Return default state on error
      return GateState.withAutoStatus(
        level: 0,
        isMoving: false,
        timestamp: DateTime.now(),
      );
    }
  }

  /// L·∫•y tr·∫°ng th√°i c·ªïng hi·ªán t·∫°i (deprecated - ƒë·ªÉ t∆∞∆°ng th√≠ch)
  Future<GateLevel?> getCurrentGateStateLegacy(String deviceId) async {
    try {
      final QuerySnapshot snapshot = await _firestore
          .collection(_gateStateCollection)
          .where('device_id', isEqualTo: deviceId)
          .orderBy('created_at', descending: true)
          .limit(1)
          .get();

      if (snapshot.docs.isNotEmpty) {
        final data = snapshot.docs.first.data() as Map<String, dynamic>;
        final levelName = data['level'] as String?;
        
        // T√¨m GateLevel t·ª´ t√™n
        for (final level in GateLevel.values) {
          if (level.name == levelName) {
            return level;
          }
        }
      }
      
      return GateLevel.closed; // M·∫∑c ƒë·ªãnh l√† ƒë√≥ng
    } catch (e) {
      print('‚ùå Firebase gate state query error: $e');
      return GateLevel.closed;
    }
  }

  /// L·∫•y l·ªãch s·ª≠ tr·∫°ng th√°i c·ªïng
  Future<List<Map<String, dynamic>>> getGateHistory({
    required String deviceId,
    required DateTime startTime,
    required DateTime endTime,
  }) async {
    try {
      final QuerySnapshot snapshot = await _firestore
          .collection(_gateStateCollection)
          .where('device_id', isEqualTo: deviceId)
          .where('created_at', isGreaterThanOrEqualTo: startTime)
          .where('created_at', isLessThanOrEqualTo: endTime)
          .orderBy('created_at', descending: true)
          .get();

      return snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return data;
      }).toList();
    } catch (e) {
      print('‚ùå Firebase gate history query error: $e');
      return [];
    }
  }

  /// Stream theo d√µi tr·∫°ng th√°i c·ªïng real-time
  Stream<GateLevel> watchGateState(String deviceId) {
    return _firestore
        .collection(_gateStateCollection)
        .where('device_id', isEqualTo: deviceId)
        .orderBy('created_at', descending: true)
        .limit(1)
        .snapshots()
        .map((snapshot) {
      if (snapshot.docs.isNotEmpty) {
        final data = snapshot.docs.first.data();
        final levelName = data['level'] as String?;
        
        for (final level in GateLevel.values) {
          if (level.name == levelName) {
            return level;
          }
        }
      }
      return GateLevel.closed;
    });
  }

  /// T√≠nh to√°n th·ªëng k√™ s·ª≠ d·ª•ng c·ªïng
  Future<Map<String, dynamic>> getGateUsageStats({
    required String deviceId,
    required DateTime startTime,
    required DateTime endTime,
  }) async {
    try {
      final history = await getGateHistory(
        deviceId: deviceId,
        startTime: startTime,
        endTime: endTime,
      );

      final Map<String, int> levelCounts = {};
      int totalOperations = history.length;

      for (final record in history) {
        final level = record['level'] as String? ?? 'closed';
        levelCounts[level] = (levelCounts[level] ?? 0) + 1;
      }

      return {
        'total_operations': totalOperations,
        'level_distribution': levelCounts,
        'most_used_level': levelCounts.entries
            .fold<MapEntry<String, int>?>(
              null, 
              (prev, curr) => prev == null || curr.value > prev.value ? curr : prev
            )?.key ?? 'closed',
        'period_start': startTime.toIso8601String(),
        'period_end': endTime.toIso8601String(),
      };
    } catch (e) {
      print('‚ùå Gate usage stats error: $e');
      return {
        'total_operations': 0,
        'level_distribution': {},
        'most_used_level': 'closed',
      };
    }
  }

  /// Di chuy·ªÉn c·ªïng theo ph·∫ßn trƒÉm t∆∞∆°ng ƒë·ªëi (so v·ªõi tr·∫°ng th√°i hi·ªán t·∫°i)
  Future<_GateMoveResult> moveGateRelative(int relativePercent) async {
    try {
      final current = await getCurrentGateState();
      int newLevel = (current.level + relativePercent).clamp(0, 100);
      if (newLevel == current.level) {
        return _GateMoveResult(
          success: false,
          targetLevel: current.level,
          message: 'C·ªïng ƒë√£ ·ªü m·ª©c $newLevel%',
        );
      }
      return _GateMoveResult(
        success: true,
        targetLevel: newLevel,
        message: 'Di chuy·ªÉn c·ªïng ƒë·∫øn $newLevel%',
      );
    } catch (e) {
      return _GateMoveResult(
        success: false,
        targetLevel: 0,
        message: 'L·ªói khi l·∫•y tr·∫°ng th√°i c·ªïng: $e',
      );
    }
  }
  
  /// Di chuy·ªÉn c·ªïng ƒë·∫øn ph·∫ßn trƒÉm tuy·ªát ƒë·ªëi
  Future<_GateMoveResult> moveGateAbsolute(int targetPercent) async {
    try {
      final current = await getCurrentGateState();
      int newLevel = targetPercent.clamp(0, 100);
      if (newLevel == current.level) {
        return _GateMoveResult(
          success: false,
          targetLevel: current.level,
          message: 'C·ªïng ƒë√£ ·ªü m·ª©c $newLevel%',
        );
      }
      return _GateMoveResult(
        success: true,
        targetLevel: newLevel,
        message: 'Di chuy·ªÉn c·ªïng ƒë·∫øn $newLevel%',
      );
    } catch (e) {
      return _GateMoveResult(
        success: false,
        targetLevel: 0,
        message: 'L·ªói khi l·∫•y tr·∫°ng th√°i c·ªïng: $e',
      );
    }
  }

  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªïng ƒëang m·ªü
  Future<bool> setGateOpening(int currentLevel) async {
    final gateState = GateState.withAutoStatus(
      level: currentLevel,
      isMoving: true,
      forcedStatus: GateStatus.opening,
    );
    return saveGateState(gateState);
  }

  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªïng ƒëang ƒë√≥ng
  Future<bool> setGateClosing(int currentLevel) async {
    final gateState = GateState.withAutoStatus(
      level: currentLevel,
      isMoving: true,
      forcedStatus: GateStatus.closing,
    );
    return saveGateState(gateState);
  }

  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªïng ƒë√£ m·ªü ho√†n t·∫•t
  Future<bool> setGateOpened(int finalLevel) async {
    final gateState = GateState.withAutoStatus(
      level: finalLevel,
      isMoving: false,
      forcedStatus: finalLevel > 0 ? GateStatus.open : GateStatus.closed,
    );
    return saveGateState(gateState);
  }

  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªïng ƒë√£ ƒë√≥ng ho√†n t·∫•t
  Future<bool> setGateClosed() async {
    final gateState = GateState.withAutoStatus(
      level: 0,
      isMoving: false,
      forcedStatus: GateStatus.closed,
    );
    return saveGateState(gateState);
  }

  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªïng b·ªã d·ª´ng
  Future<bool> setGateStopped(int currentLevel) async {
    final gateState = GateState.withAutoStatus(
      level: currentLevel,
      isMoving: false,
      forcedStatus: GateStatus.stopped,
    );
    return saveGateState(gateState);
  }

  /// C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªïng g·∫∑p l·ªói
  Future<bool> setGateError(int currentLevel, {String? errorMessage}) async {
    final gateState = GateState.withAutoStatus(
      level: currentLevel,
      isMoving: false,
      forcedStatus: GateStatus.error,
    );
    
    // L∆∞u th√™m th√¥ng tin l·ªói n·∫øu c√≥
    final success = await saveGateState(gateState);
    if (success && errorMessage != null) {
      try {
        await _firestore
            .collection(_gateStateCollection)
            .doc('main_gate')
            .update({
          'error_message': errorMessage,
          'error_timestamp': FieldValue.serverTimestamp(),
        });
      } catch (e) {
        print('‚ùå Error saving error message: $e');
      }
    }
    
    return success;
  }
}

/// K·∫øt qu·∫£ di chuy·ªÉn c·ªïng
class _GateMoveResult {
  final bool success;
  final int targetLevel;
  final String message;
  _GateMoveResult({
    required this.success,
    required this.targetLevel,
    required this.message,
  });
}
